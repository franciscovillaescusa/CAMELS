.. _ICs:

******************
Initial conditions
******************

The initial conditions of all simulations were generated at :math:`z=127` using second order lagrangian perturbation theory (2LPT). The same transfer function (total matter) was used for the gas and dark matter components. Particles were initially laid down on a regular grid: one grid for the dark matter particles and another grid, offset by half a grid cell, for the gas.

The initial condition files can be found inside each simulation folder. For instance, to access the initial conditions of the LH_156 simulation of the SIMBA suite:

.. code-block:: bash

   >> ls SIMBA/LH_156/ICs
   2LPT.param   ics.1  ics.4  ics.7              Pk_m_z=0.000.txt
   CAMB.params  ics.2  ics.5  inputspec_ics.txt
   ics.0        ics.3  ics.6  logIC

There are different files:

- ``2LPT.param``. This is the 2LPT parameter file used to generate the initial conditions of the simulation.
- ``CAMB.params``. This is the CAMB parameter file used to generate the :math:`z=0` matter power spectrum needed to generate the initial conditions.
- ``ics.X``. These files contain the positions, velocities, and IDs of the particles in the initial conditions. They are Gadget Format-I files, that can be read with `Pylians3 <https://github.com/franciscovillaescusa/Pylians3>`_  as shown below.
- ``inputspec_ics.txt``. A file generated by 2LPT with the input power spectrum. Only needed for debugging.
- ``logIC``. This file contains the output generated by 2LPT when generating the initial conditions and is useful for internal debugging.
- ``Pk_m_z=0.000.txt``. The linear matter power spectrum at :math:`z=0` for the simulation. This file is generated by running the ``CAMB`` code with the ``CAMB.params`` parameter file. This file is used in ``2LPT.param`` to generate the initial conditions.

The files with the initial conditions can be read as follows:

.. code-block:: python

   import numpy as np
   import readgadget

   # name of the snapshot
   snapshot = '/mnt/ceph/users/camels/Sims/SIMBA/LH_156/ICs/ics'

   # read snapshot header
   header   = readgadget.header(snapshot)
   BoxSize  = header.boxsize/1e3  #Mpc/h
   Nall     = header.nall         #Total number of particles
   Masses   = header.massarr*1e10 #Masses of the particles in Msun/h
   Omega_m  = header.omega_m      #value of Omega_m
   Omega_l  = header.omega_l      #value of Omega_l
   h        = header.hubble       #value of h
   redshift = header.redshift     #redshift of the snapshot
   Hubble   = 100.0*np.sqrt(Omega_m*(1.0+redshift)**3+Omega_l)#Value of H(z) in km/s/(Mpc/h)

   # read positions, velocities and IDs of the gas particles
   ptype = [0] #gas is particle type 0
   pos_g = readgadget.read_block(snapshot, "POS ", ptype)/1e3 #positions in Mpc/h
   vel_g = readgadget.read_block(snapshot, "VEL ", ptype)     #peculiar velocities in km/s
   ids_g = readgadget.read_block(snapshot, "ID  ", ptype)-1   #IDs starting from 0

   # read positions, velocities and IDs of the dark matter particles
   ptype = [1] #dark matter is particle type 1
   pos_c = readgadget.read_block(snapshot, "POS ", ptype)/1e3 #positions in Mpc/h
   vel_c = readgadget.read_block(snapshot, "VEL ", ptype)     #peculiar velocities in km/s
   ids_c = readgadget.read_block(snapshot, "ID  ", ptype)-1   #IDs starting from 0


.. Note::

   When using the ``readgadget`` library, the particle velocities automatically incorporate the :math:`\sqrt{a}` Gadget factor.

.. Note::

   When reading initial conditions of N-body simulations, only positions, velocities, and IDs for dark matter particles are present, not for gas.
